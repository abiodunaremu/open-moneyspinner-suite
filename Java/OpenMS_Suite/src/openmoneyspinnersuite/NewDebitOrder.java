
// Open MoneySpinner Suite v1
// An open source business management software system written in Java and MySQL
// Recommended IDE is NetBeans IDE 7.0.1
// Support Web Site: http://www.milliscript.com
//
// Copyright (C) 2010-2014, Abiodun Aremu, Ibadan/NIGERIA.
// Open MoneySpinner Suite is distributed under the terms of the Apache License version 2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package openmoneyspinnersuite;

/**
 *
 * @author Abiodun Aremu
 */
import javax.swing.*;
import java.sql.*;

final class NewDebitOrder extends javax.swing.JInternalFrame {

    Systems systems=new Systems();
    Object[][] tableObject=new Object[][]{{null,null,null,null,null,null,null}};
    PreparedStatement statement;
    PreparedStatement statement2;
    String addInUse="N";
    String delInUse="N";
    String orderCode="";
    String tag="",transType="DR";
    int onInventoryAccount=1;
    boolean column4enabled=true;
    String debitOrderCode;
    Thread processThread=new Thread();
    Thread titleThread=new Thread();

    /** Creates new form NewCreditOrder */
    public NewDebitOrder()
    {
        initComponents();
        setTitle("::. New Debit Order By User ("+OpenMSApp.EmployeeName+")");
        reset();
        JPopupMenu popup=new JPopupMenu();
        JMenuItem menuPopup=new JMenuItem("Select Item");
        popup.add(menuPopup);
        jTable1.setComponentPopupMenu(popup);
        menuPopup.addActionListener(new java.awt.event.ActionListener(){
        public void actionPerformed(java.awt.event.ActionEvent e){
        
        String v=new ItemList(OpenMS_FinanceAdmin_Desktop.appFrame,true).getSelectedItem();
        if(v==null||v.equalsIgnoreCase("null"))return;
        
        jTable1.setValueAt(v, jTable1.getRowCount()-1, 1);
        }});
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jNameTextField = new javax.swing.JTextField();
        merchantIDComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jDateTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTotAmountTextField = new javax.swing.JTextField();
        makeOrderButton = new javax.swing.JButton();
        addRowButton = new javax.swing.JButton();
        deleteRowButton = new javax.swing.JButton();
        jRefDepartmentComboBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jAccountNameComboBox = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jTransactionNoTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTransactionTypeComboBox = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jCostOrderCodeComboBox = new javax.swing.JComboBox();
        transMonthComboBox = new javax.swing.JComboBox();
        transDayComboBox = new javax.swing.JComboBox();
        transYearComboBox = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jTransactionUnitTextField = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();
        jAmtDueTextField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jToBalanceTextField = new javax.swing.JTextField();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        jStockTypeComboBox = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jOpeningCheckBox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(openmoneyspinnersuite.OpenMS_Finance_App.class).getContext().getResourceMap(NewDebitOrder.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setFrameIcon(resourceMap.getIcon("Form.frameIcon")); // NOI18N
        setName("Form"); // NOI18N
        setVisible(true);

        jPanel1.setName("jPanel1"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jNameTextField.setEditable(false);
        jNameTextField.setText(resourceMap.getString("jNameTextField.text")); // NOI18N
        jNameTextField.setName("jNameTextField"); // NOI18N
        jNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNameTextFieldActionPerformed(evt);
            }
        });

        merchantIDComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-- Select --", "Item 2", "Item 3", "Item 4" }));
        merchantIDComboBox.setName("merchantIDComboBox"); // NOI18N
        merchantIDComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                merchantIDComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jDateTextField.setEditable(false);
        jDateTextField.setText(resourceMap.getString("jDateTextField.text")); // NOI18N
        jDateTextField.setName("jDateTextField"); // NOI18N
        jDateTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDateTextFieldActionPerformed(evt);
            }
        });

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jTotAmountTextField.setEditable(false);
        jTotAmountTextField.setName("jTotAmountTextField"); // NOI18N
        jTotAmountTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTotAmountTextFieldActionPerformed(evt);
            }
        });

        makeOrderButton.setIcon(resourceMap.getIcon("makeOrderButton.icon")); // NOI18N
        makeOrderButton.setText(resourceMap.getString("makeOrderButton.text")); // NOI18N
        makeOrderButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        makeOrderButton.setName("makeOrderButton"); // NOI18N
        makeOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeOrderButtonActionPerformed(evt);
            }
        });

        addRowButton.setIcon(resourceMap.getIcon("addRowButton.icon")); // NOI18N
        addRowButton.setText(resourceMap.getString("addRowButton.text")); // NOI18N
        addRowButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        addRowButton.setName("addRowButton"); // NOI18N
        addRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRowButtonActionPerformed(evt);
            }
        });

        deleteRowButton.setIcon(resourceMap.getIcon("deleteRowButton.icon")); // NOI18N
        deleteRowButton.setText(resourceMap.getString("deleteRowButton.text")); // NOI18N
        deleteRowButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        deleteRowButton.setName("deleteRowButton"); // NOI18N
        deleteRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRowButtonActionPerformed(evt);
            }
        });

        jRefDepartmentComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-- Select --", "Item 2", "Item 3", "Item 4" }));
        jRefDepartmentComboBox.setName("jRefDepartmentComboBox"); // NOI18N
        jRefDepartmentComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRefDepartmentComboBoxActionPerformed(evt);
            }
        });

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jAccountNameComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-- Select --", "Item 2", "Item 3", "Item 4" }));
        jAccountNameComboBox.setName("jAccountNameComboBox"); // NOI18N
        jAccountNameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAccountNameComboBoxActionPerformed(evt);
            }
        });

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jTransactionNoTextField.setName("jTransactionNoTextField"); // NOI18N
        jTransactionNoTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTransactionNoTextFieldActionPerformed(evt);
            }
        });

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        jTransactionTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-- Select --", "Item 2", "Item 3", "Item 4" }));
        jTransactionTypeComboBox.setName("jTransactionTypeComboBox"); // NOI18N
        jTransactionTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTransactionTypeComboBoxActionPerformed(evt);
            }
        });

        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N

        jCostOrderCodeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-- Select --", "Item 2", "Item 3", "Item 4" }));
        jCostOrderCodeComboBox.setEnabled(false);
        jCostOrderCodeComboBox.setName("jCostOrderCodeComboBox"); // NOI18N
        jCostOrderCodeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCostOrderCodeComboBoxActionPerformed(evt);
            }
        });

        transMonthComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-- Month --" }));
        transMonthComboBox.setName("transMonthComboBox"); // NOI18N
        transMonthComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transMonthComboBoxActionPerformed(evt);
            }
        });

        transDayComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-- Day --" }));
        transDayComboBox.setName("transDayComboBox"); // NOI18N

        transYearComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-- Year --" }));
        transYearComboBox.setName("transYearComboBox"); // NOI18N

        jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N

        jTransactionUnitTextField.setEditable(false);
        jTransactionUnitTextField.setName("jTransactionUnitTextField"); // NOI18N
        jTransactionUnitTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTransactionUnitTextFieldActionPerformed(evt);
            }
        });

        jCheckBox1.setText(resourceMap.getString("jCheckBox1.text")); // NOI18N
        jCheckBox1.setEnabled(false);
        jCheckBox1.setName("jCheckBox1"); // NOI18N

        jLabel14.setText(resourceMap.getString("jLabel14.text")); // NOI18N
        jLabel14.setName("jLabel14"); // NOI18N

        jAmtDueTextField.setText(resourceMap.getString("jAmtDueTextField.text")); // NOI18N
        jAmtDueTextField.setName("jAmtDueTextField"); // NOI18N
        jAmtDueTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jAmtDueTextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jAmtDueTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jAmtDueTextFieldKeyTyped(evt);
            }
        });

        jLabel13.setText(resourceMap.getString("jLabel13.text")); // NOI18N
        jLabel13.setName("jLabel13"); // NOI18N

        jToBalanceTextField.setEditable(false);
        jToBalanceTextField.setName("jToBalanceTextField"); // NOI18N

        jCheckBox3.setText(resourceMap.getString("jCheckBox3.text")); // NOI18N
        jCheckBox3.setName("jCheckBox3"); // NOI18N

        jCheckBox4.setText(resourceMap.getString("jCheckBox4.text")); // NOI18N
        jCheckBox4.setName("jCheckBox4"); // NOI18N

        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N

        jStockTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-- Select --", "Opening Stock", "Other Stock" }));
        jStockTypeComboBox.setEnabled(false);
        jStockTypeComboBox.setName("jStockTypeComboBox"); // NOI18N
        jStockTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStockTypeComboBoxActionPerformed(evt);
            }
        });

        jButton1.setIcon(resourceMap.getIcon("jButton1.icon")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jOpeningCheckBox.setText(resourceMap.getString("jOpeningCheckBox.text")); // NOI18N
        jOpeningCheckBox.setName("jOpeningCheckBox"); // NOI18N
        jOpeningCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOpeningCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jOpeningCheckBox))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel9)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel1)
                            .addComponent(jLabel11)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(merchantIDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(transMonthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(transDayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(transYearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jTransactionTypeComboBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jNameTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                                .addComponent(jTransactionNoTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                                .addComponent(jTransactionUnitTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTotAmountTextField)
                                    .addComponent(jDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(55, 55, 55)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6)
                                .addComponent(jLabel5)
                                .addComponent(jLabel13)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel14))))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jStockTypeComboBox, 0, 204, Short.MAX_VALUE)
                            .addComponent(jToBalanceTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                            .addComponent(jAmtDueTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                            .addComponent(jCostOrderCodeComboBox, 0, 204, Short.MAX_VALUE)
                            .addComponent(jAccountNameComboBox, 0, 204, Short.MAX_VALUE)
                            .addComponent(jRefDepartmentComboBox, 0, 204, Short.MAX_VALUE))
                        .addGap(44, 44, 44)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addRowButton, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                            .addComponent(deleteRowButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                            .addComponent(makeOrderButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(merchantIDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTransactionTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTransactionNoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(transMonthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(transDayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(transYearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTransactionUnitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11)
                                    .addComponent(jStockTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCostOrderCodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jAccountNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jRefDepartmentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jAmtDueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jToBalanceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTotAmountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(addRowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(deleteRowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(makeOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox4)
                    .addComponent(jOpeningCheckBox))
                .addGap(42, 42, 42))
        );

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "S/N", "Item", "Description", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setName("jTable1"); // NOI18N
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable1PropertyChange(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTable1KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("jTable1.columnModel.title0")); // NOI18N
        jTable1.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("jTable1.columnModel.title3")); // NOI18N
        jTable1.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("jTable1.columnModel.title1")); // NOI18N
        jTable1.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("jTable1.columnModel.title2")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 974, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jDateTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDateTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jDateTextFieldActionPerformed

    private void jNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jNameTextFieldActionPerformed

    private void jTotAmountTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTotAmountTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTotAmountTextFieldActionPerformed
    public boolean validateEntry(boolean validateTable)
    {
        boolean entryValid=true;
        if(merchantIDComboBox.getSelectedItem().equals("-- Select --"))
        {
            JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"PLEASE SELECT TRANSACTION BY (ID) ","ERROR !",JOptionPane.ERROR_MESSAGE);
            entryValid=false;
            return entryValid;
        }
        String accountName=String.valueOf(jAccountNameComboBox.getSelectedItem());
        String accountCategory=systems.getValue(OpenMSApp.Database_A, "Select * from Account where vAccountName='"+accountName+"'", "cCategory");
        String loginProcess=systems.getValue(OpenMSApp.Database_A, "Select * from Login where cLoginCode='"+OpenMSApp.LoginCode+"'", "cCategory");
        
        if(validateTable==true){
            
        int x=tableObject.length;
        int y=x+1;
        for(int z=0;z<x;z++)
        {
            if(jTable1.getValueAt(z,1)==null||jTable1.getValueAt(z,2)==null||jTable1.getValueAt(z,3)==null||jTable1.getValueAt(z,4)==null||jTable1.getValueAt(z,5)==null||jTable1.getValueAt(z,6)==null)
            {
                JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"NULL VALUE FOUND IN TABLE ! ","ERROR !",JOptionPane.ERROR_MESSAGE);
                entryValid=false;
            return entryValid;
            }
        }

       int a=tableObject.length;
       int b=0;

        while(b<a)
        {
            String value=jTable1.getValueAt(b,3).toString().trim();
            String value2=jTable1.getValueAt(b,4).toString().trim();
            String value3=jTable1.getValueAt(b,6).toString().trim();
            String value5=jTable1.getValueAt(b,5).toString().trim();

            if(!systems.isStringDecimal(value))
            {
                JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"QUANTITY MUST BE IN DIGIT/DECIMAL","ERROR !",JOptionPane.ERROR_MESSAGE);
                entryValid=false;
            return entryValid;
            }
            if(!systems.isStringDecimal(value2))
            {
                JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"RATE MUST BE IN MONEY FORMAT","ERROR !",JOptionPane.ERROR_MESSAGE);
                entryValid=false;
            return entryValid;
            }
            if(!systems.isStringDecimal(value3))
            {
                JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"AMOUNT MUST BE IN MONEY FORMAT","ERROR !",JOptionPane.ERROR_MESSAGE);
                entryValid=false;
            return entryValid;
            } 
            if(!systems.isStringDecimal(value5))
            {
                JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"VAT MUST BE IN MONEY FORMAT","ERROR !",JOptionPane.ERROR_MESSAGE);
                entryValid=false;
            return entryValid;
            } 
            if(accountCategory.equalsIgnoreCase("INVENTORY")&&loginProcess.equalsIgnoreCase("Finance"))
        {
                JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"YOU ARE NOT AUTHORIZED TO DEBIT AN INVENTORY ACCOUNT \n PLEASE CONTACT YOUR ACCOUNT ADMINISTRATOR","AUTHORIZATION ERROR !",JOptionPane.ERROR_MESSAGE);
                entryValid=false;
            return entryValid;
        
        }
            String value4=jTable1.getValueAt(b,1).toString().trim();
        
            String itemCode=systems.getValue(OpenMSApp.Database_A, "Select * from item where vName='"+value4+"'", 1);            
            String itemType=systems.getValue(OpenMSApp.Database_A, "Select * from item where vName='"+value4+"'", 4);
            System.out.println("item code="+itemCode+" itemType="+itemType);
            
            if(itemType.equalsIgnoreCase("Stock")&&accountCategory.equalsIgnoreCase("INVENTORY"))
            {
                
                String quantityAvailable=systems.getItemQuantityAvailable(itemCode);
                String weight=systems.getValue(OpenMSApp.Database_A, Connect.procInit+" prnWeighMoney"+Connect.procInitStart+""+quantityAvailable+" , "+value+Connect.procInitEnd, "weightValue");
                
                if(weight.equalsIgnoreCase("1 < 2"))
                {
                    JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"INSUFFICIENT QUANTITY OF ITEM '"+value4+"' IN STOCK FOR THIS TRANSACTION","ERROR !",JOptionPane.ERROR_MESSAGE);
                    entryValid=false;
                    return entryValid;
                }
            }
            /**
            String orderCode[]=systems.getOrderCode(itemCode); 
            if(orderCode[0]!=null)
            {               
            String quantityList[]=systems.getQuantity(itemCode);
            String amountList[]=systems.getAmount(itemCode);
            String quantityConsumedList=systems.getItemQuantityAvailable(itemCode);
            
            String lastCreditedAccount =systems.getValue(OpenMSApp.Database_A, "Select * from creditOrder where cCreditOrderCode='"+orderCode[0]+"'", "cAccountCode");
            String nextQuantity=quantityList[0];
            String nextAmount=amountList[0];    
            String nextQuantityConsumed=quantityConsumedList;                   
                    
            String actualAccountName=systems.getValue(OpenMSApp.Database_A, "Select * from Account where cAccountCode='"+lastCreditedAccount+"'", "vAccountName");               
            String actualAccountCategory=systems.getValue(OpenMSApp.Database_A, "Select * from Account where cAccountCode='"+lastCreditedAccount+"'", "cCategory");
            
            String qtyAvailable=systems.getValue(OpenMSApp.Database_A, "Select "+nextQuantity+"-"+nextQuantityConsumed+" as 'SUM'", 1);
            String qtyWeight=systems.getValue(OpenMSApp.Database_A, Connect.procInit+" prnWeighMoney"+Connect.procInitStart+""+qtyAvailable+" , "+value+Connect.procInitEnd, "weightValue");
                
                if(qtyWeight.equalsIgnoreCase("1 < 2")&& actualAccountCategory.equalsIgnoreCase("INVENTORY"))
                {
                    JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"CURRENT CONSUMPTION OF ITEM '"+value4+"' MUST BE LESS THAN OR EQUAL TO '"+qtyAvailable+"'\n FOR ACCOUNT '"+actualAccountName+"'","ERROR !",JOptionPane.ERROR_MESSAGE);
                    entryValid=false;
                    return entryValid;
                }
                if(nextAmount.equalsIgnoreCase(value2)==false&& actualAccountCategory.equalsIgnoreCase("INVENTORY"))
                {
                    JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"CURRENT RATE OF ITEM '"+value4+"' MUST BE  EQUAL TO '"+value2+"' \n FOR ACCOUNT '"+actualAccountName+"'","ERROR !",JOptionPane.ERROR_MESSAGE);
                    entryValid=false;
                    return entryValid;
                }
                }**/
        b+=1;
        if(b==a){break;}
        }
        }
        if(!systems.isStringDecimal(jTotAmountTextField.getText().trim()))
        {
            JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"FATAL ERROR !","ERROR !",JOptionPane.ERROR_MESSAGE);
            //reset();
            entryValid=false;
            return entryValid;
        }
        if(!systems.isStringDecimal(jToBalanceTextField.getText().trim()))
        {
            JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"TO BALANCE RESULTS IN AN ERROR !","ERROR !",JOptionPane.ERROR_MESSAGE);
            //reset();
            entryValid=false;
            return entryValid;
        }
        if(jAmtDueTextField.getText().trim().equalsIgnoreCase("."))
        {           
        
            int i=JOptionPane.showConfirmDialog(JOptionPane.getRootFrame(), " ARE YOU SURE 'AMOUNT DUE = TOTAL AMOUNT' ?", "WARNING !",JOptionPane.YES_NO_OPTION);
            if(i==JOptionPane.NO_OPTION)
            {
                entryValid=false;
                return entryValid;
            }
       }
        if(jAccountNameComboBox.getSelectedItem().equals("-- Select --"))
        {
            JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"PLEASE SELECT AN ACCOUNT ","ERROR !",JOptionPane.ERROR_MESSAGE);
            entryValid=false;
            return entryValid;
        }
        if(jRefDepartmentComboBox.getSelectedItem().equals("-- Select --"))
        {
            JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"PLEASE SELECT A REFERAL DEPARTMENT ","ERROR !",JOptionPane.ERROR_MESSAGE);
            entryValid=false;
            return entryValid;
        }
        if(jTransactionTypeComboBox.getSelectedItem().equals("-- Select --"))
        {
            JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"PLEASE SELECT A TRANSACTION TYPE ","ERROR !",JOptionPane.ERROR_MESSAGE);
            entryValid=false;
            return entryValid;
        }
        if(transMonthComboBox.getSelectedItem().equals("-- Month --"))
        {
            JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"PLEASE SELECT TRANSACTION'S DAT MONTH ","ERROR !",JOptionPane.ERROR_MESSAGE);
            entryValid=false;
            return entryValid;
        }
        if(transDayComboBox.getSelectedItem().equals("-- Day --"))
        {
            JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"PLEASE SELECT TRANSACTION'S DATE DAY ","ERROR !",JOptionPane.ERROR_MESSAGE);
            entryValid=false;
            return entryValid;
        }
        if(transYearComboBox.getSelectedItem().equals("-- Year --"))
        {
            JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"PLEASE SELECT TRANSACTION'S DATE YEAR ","ERROR !",JOptionPane.ERROR_MESSAGE);
            entryValid=false;
            return entryValid;
        }
        if(accountCategory.equalsIgnoreCase("INVENTORY")&&jStockTypeComboBox.getSelectedItem().equals("-- Select --"))
        {
            JOptionPane.showMessageDialog(JOptionPane.getRootFrame()," PLEASE SELECT A STOCK TYPE.","ERROR !",JOptionPane.ERROR_MESSAGE);
            entryValid=false;
            return entryValid;
        }
        String accountStatus=systems.getValue(OpenMSApp.Database_A, "Select * from Account where vAccountName='"+accountName+"'", "cStatus");
        if(accountStatus.equalsIgnoreCase("Frozen"))
        {
            JOptionPane.showMessageDialog(JOptionPane.getRootFrame()," SELECTED ACCOUNT IS FROZEN ! \n SEE YOUR ACCOUNT ADMINISTRATOR FOR DETAILS.","ERROR !",JOptionPane.ERROR_MESSAGE);
            entryValid=false;
            return entryValid;
        }
        String accountBalance=systems.getValue(OpenMSApp.Database_A, "Select * from Account where vAccountName='"+accountName+"'", "mAmount");
        String newAccountBalance=systems.getValue(OpenMSApp.Database_A, Connect.procInit+" prnSubtractMoney"+Connect.procInitStart+accountBalance+","+jTotAmountTextField.getText().trim()+Connect.procInitEnd, "mSumValue");
        try
        {
            systems.converToRealMoneyFormat(newAccountBalance);
        }
        catch(Exception e)
        {
                JOptionPane.showMessageDialog(JOptionPane.getRootFrame()," INSUFFICIENT FUND IN THE SELECTED ACCOUNT \n  FOR THIS TRANSACTION !","ERROR !",JOptionPane.ERROR_MESSAGE);
                entryValid=false;
            return entryValid;
        }
        if(accountCategory.equalsIgnoreCase("INVENTORY"))
        {
            int i=JOptionPane.showConfirmDialog(JOptionPane.getRootFrame(), " THIS TRANSACTION WILL BE CONSENTED AND POSTED AUTOMATICALLY \n DO YOU WANT TO PROCEED ?", "WARNING !",JOptionPane.YES_NO_OPTION);
            if(i==JOptionPane.NO_OPTION)
            {
                entryValid=false;
                return entryValid;
            }
        
        }
        
            return entryValid;
    }
    private void makeOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeOrderButtonActionPerformed
        /* Execute submit thread */
            processThread=new Thread(new Runnable() {
                public void run() {
                disableControls();
                performMakeOrder();
                }
            });
            titleThread=new Thread(new Runnable() {
                public void run() {
                    while(processThread.isAlive())setProcessingTitle(titleThread);
                    enableControls();
                    System.out.println("newCreditOrderThread stopped runing.");
                }
            });
            processThread.start();
            titleThread.start();
    }//GEN-LAST:event_makeOrderButtonActionPerformed
    public void performMakeOrder(){
        if(validateEntry(true))
        {
            makeOrder();
            //reset();
            System.out.println("valid entry @ make order");
        }
    }
    private void merchantIDComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_merchantIDComboBoxActionPerformed
        
        String merchantID=merchantIDComboBox.getSelectedItem().toString();
        if(merchantID.equals("-- Select --"))
        {/* Execute submit thread */
            processThread=new Thread(new Runnable() {
                public void run() {
                disableControls();
                resetMerchantID();
                }
            });
            titleThread=new Thread(new Runnable() {
                public void run() {
                    while(processThread.isAlive())setProcessingTitle(titleThread);
                    enableControls();
                    System.out.println("newCreditOrderThread stopped runing.");
                }
            });
            processThread.start();
            titleThread.start();
        }
        else
        {
            jNameTextField.setText(systems.getValue(OpenMSApp.Database_A, "Select * from vwMerchant where cMerchantID = '"+merchantID+"'", "vName"));
        }
    }//GEN-LAST:event_merchantIDComboBoxActionPerformed
                                             
    public void calculateToBalance()
    {
        String dueValue=jAmtDueTextField.getText();
        if(dueValue.equalsIgnoreCase(".")){dueValue=jTotAmountTextField.getText();}
        String totAmtValue=jTotAmountTextField.getText();
        String toBalance=systems.getValue(OpenMSApp.Database_A, Connect.procInit+"  prnSubtractMoney"+Connect.procInitStart+""+dueValue+" , "+totAmtValue+Connect.procInitEnd, "mSumValue");
       try{
            jToBalanceTextField.setText(systems.converToRealMoneyFormat(toBalance)); 
       }
       catch(Exception e){
            jToBalanceTextField.setText("Er!M1C01K0");
       }
    }
    public void addRow()
    {
        String v=new ItemList(OpenMS_FinanceAdmin_Desktop.appFrame,true).getSelectedItem();
        if(v==null||v.equalsIgnoreCase("null"))return;        
        addInUse="Y";
        int x=tableObject.length;
        int y=x+1;
        Object[][] holdObject=new Object[y][7];

        for(int z=0;z<x;z++)
        {
            if(jTable1.getValueAt(z,1)==null||jTable1.getValueAt(z,2)==null||jTable1.getValueAt(z,3)==null||jTable1.getValueAt(z,4)==null||jTable1.getValueAt(z,5)==null||jTable1.getValueAt(z,6)==null)
            {
                JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"Null value found ! ","ERROR !",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        for(int z=0;z<x;z++)
        {
            if(jTable1.getValueAt(z,1)!=null&&jTable1.getValueAt(z,2)!=null&&jTable1.getValueAt(z,3)!=null&&jTable1.getValueAt(z,4)!=null&&jTable1.getValueAt(z,5)!=null&&jTable1.getValueAt(z,6)!=null)
            {
                holdObject[z][0]=z+1;
                holdObject[z][1]=jTable1.getValueAt(z,1).toString();
                holdObject[z][2]=jTable1.getValueAt(z,2).toString();
                holdObject[z][3]=jTable1.getValueAt(z,3).toString();
                holdObject[z][4]=jTable1.getValueAt(z,4).toString();
                holdObject[z][5]=jTable1.getValueAt(z,5).toString();
                holdObject[z][6]=jTable1.getValueAt(z,6).toString();
                holdObject[y-1][0]=y;
            }
        }

        tableObject=holdObject;

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            tableObject,
            new String [] {
                "S/N", "Item","Description", "Quantity", "Rate", "VAT", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false,true, true, true, column4enabled, column4enabled, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getColumnModel().getColumn(0).setMinWidth(40);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(40);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(40);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(10);
            resetItem();
            addInUse="N";
        jTable1.setValueAt(v, jTable1.getRowCount()-1, 1);
    }
    private void addRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRowButtonActionPerformed
                       addRow();
    }//GEN-LAST:event_addRowButtonActionPerformed
    public void deleteRow()
    {
        delInUse="Y";
        int x=tableObject.length;
        int y=x-1;
        Object[][] holdObject=new Object[y][7];


            if(x==1)
            {
                JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"Can Not Delete Row \n   Invalid Operation ! ","ERROR !",JOptionPane.ERROR_MESSAGE);
                return;
            }

        for(int z=0;z<x-1;z++)
        {
            if(jTable1.getValueAt(z,1)!=null&&jTable1.getValueAt(z,2)!=null&&jTable1.getValueAt(z,3)!=null&&jTable1.getValueAt(z,4)!=null&&jTable1.getValueAt(z,5)!=null&&jTable1.getValueAt(z,6)!=null)
            {
                holdObject[z][0]=z+1;
                holdObject[z][1]=jTable1.getValueAt(z,1).toString();
                holdObject[z][2]=jTable1.getValueAt(z,2).toString();
                holdObject[z][3]=jTable1.getValueAt(z,3).toString();
                holdObject[z][4]=jTable1.getValueAt(z,4).toString();
                holdObject[z][5]=jTable1.getValueAt(z,5).toString();
                holdObject[z][6]=jTable1.getValueAt(z,6).toString();
                holdObject[y-1][0]=y;
            }
        }
        tableObject=holdObject;

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            tableObject,
            new String [] {
                "S/N", "Item","Description", "Quantity", "Rate", "VAT", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false,true, true, true, column4enabled, column4enabled, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getColumnModel().getColumn(0).setMinWidth(40);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(40);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(40);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(10);
        resetItem();
        delInUse="N";
    }
    private void deleteRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRowButtonActionPerformed
                        deleteRow();
    }//GEN-LAST:event_deleteRowButtonActionPerformed

    private void jTable1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1KeyTyped

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        System.out.println("Key Pressed on JTable1");
    }//GEN-LAST:event_jTable1KeyPressed
    synchronized void freeHeap()
    {
        Systems.getInstance().freeHeap();         
        if(!systems.freeingHeap)
        tablePropertyChange();
    }
    synchronized void tablePropertyChange()
    {
        if(systems.freeingHeap)return;
        if(addInUse.equals("N")&&delInUse.equals("N"))
        {

        int x=jTable1.getEditingRow();
        int y=jTable1.getEditingColumn();

        int value=0;
        String firstValue="0";
        String secondValue="0";
        String sumValue="0";

            int a=tableObject.length;
            int b=0;
            while(b<a)
            {
                if(jTable1.getValueAt(b,1)!=null&&b==a-1&&jCheckBox3.isSelected()==false)
                {
                    String itemCost=systems.getValue(OpenMSApp.Database_A, "Select * from item where vName='"+jTable1.getValueAt(b,1)+"'", 7);
                    jTable1.setValueAt(itemCost,b,4);
                    String itemDescr=systems.getValue(OpenMSApp.Database_A, "Select * from item where vName='"+jTable1.getValueAt(b,1)+"'", 3);
                    jTable1.setValueAt(itemDescr,b,2);
                    String itemTax=systems.getValue(OpenMSApp.Database_A, "Select * from item where vName='"+jTable1.getValueAt(b,1)+"'", 10);
                    jTable1.setValueAt(itemTax,b,5);
                    
                }
                if(jTable1.getValueAt(b,3)!=null&&jTable1.getValueAt(b,4)!=null&&jTable1.getValueAt(b,5)!=null&&onInventoryAccount==1)
                {
                        String value2=jTable1.getValueAt(b,3).toString().trim();
                        String value3=jTable1.getValueAt(b,4).toString().trim();
                        String value4=jTable1.getValueAt(b,5).toString().trim();

                        if(!systems.isStringDecimal(value2))
                        {
                            JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"QUANTITY MUST BE IN DIGIT/DECIMAL","ERROR !",JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        if(!systems.isStringDecimal(value3))
                        {
                            JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"RATE MUST BE IN MONEY FORMAT","ERROR !",JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        if(!systems.isStringDecimal(value4))
                        {
                            JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"VAT MUST BE IN MONEY FORMAT","ERROR !",JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                }
                if(jTable1.getValueAt(b,3)!=null&&jTable1.getValueAt(b, 4)!=null&&jTable1.getValueAt(b, 5)!=null&&onInventoryAccount==1)
                {
                    String quantityValue="0";
                    String priceValue="0";
                    String taxValue="0";
                    String multValue="0";
                    String multTaxValue="0";
                    String amountValue="0";

                    try
                    {
                        quantityValue=systems.converToRealMoneyFormat(jTable1.getValueAt(b, 3).toString());
                    }
                    catch(Exception e)
                    {
                        quantityValue="Er!M1C01K0";
                    }
                    try
                    {
                        priceValue=systems.converToRealMoneyFormat(jTable1.getValueAt(b, 4).toString());
                    }
                    catch(Exception e)
                    {
                        priceValue="Er!M1C01K0";
                    }
                    try
                    {
                        taxValue=systems.converToRealMoneyFormat(jTable1.getValueAt(b, 5).toString());
                    }
                    catch(Exception e)
                    {
                        taxValue="Er!M1C01K0";
                    }
                    try
                    {
                        multValue=systems.getValue(OpenMSApp.Database_A, Connect.procInit+" prnMultMoney"+Connect.procInitStart+""+quantityValue+" , "+priceValue+Connect.procInitEnd, "mMultValue");

                        multTaxValue=systems.getValue(OpenMSApp.Database_A, Connect.procInit+" prnMultMoney"+Connect.procInitStart+""+quantityValue+" , "+taxValue+Connect.procInitEnd, "mMultValue");

                        amountValue=systems.getValue(OpenMSApp.Database_A, Connect.procInit+" prnAddMoney"+Connect.procInitStart+multTaxValue+" , "+multValue+Connect.procInitEnd, "mSumValue");
                    
                        jTable1.setValueAt(systems.converToRealMoneyFormat(amountValue), b, 6);
                    }
                    catch(Exception e)
                    {
                        jTable1.setValueAt("Er!M1C01K0", b, 6);
                    }
                }
                if(onInventoryAccount==0&&jTable1.getValueAt(b,3)!=null)
                {
                    String itemCode=systems.getValue(OpenMSApp.Database_A, "Select * from item where vName='"+jTable1.getValueAt(b,1)+"'", 1);           
                    try{                        
                    jTable1.setValueAt(systems.converToRealMoneyFormat(systems.getConsumedCost(itemCode, jTable1.getValueAt(b,3).toString())),b,6);
                    jTable1.setValueAt("0.00",b,5);
                    jTable1.setValueAt(systems.converToRealMoneyFormat(systems.getValue(OpenMSApp.Database_A, "Select "+jTable1.getValueAt(b,6)+"/"+jTable1.getValueAt(b,3), 1)),b,4);
                    }
                    catch(Exception e){System.out.println("Error Calc Consumed cost: "+e);}
                }
                if(jTable1.getValueAt(b,6)!=null)
                {
                    firstValue=sumValue;
                    try
                    {
                        secondValue=systems.converToRealMoneyFormat(jTable1.getValueAt(b,6).toString());
                    }
                    catch(Exception e)
                    {
                        secondValue="Er!M1C01K0";
                    }
                    sumValue=systems.getValue(OpenMSApp.Database_A, Connect.procInit+" prnAddMoney"+Connect.procInitStart+firstValue+" , "+secondValue+Connect.procInitEnd, "mSumValue");
                    System.out.println(firstValue+" "+secondValue+" "+sumValue);
                    //value+=Integer.parseInt(jTable1.getValueAt(b,3).toString());
                }
                b+=1;
                if(b==a){break;}
            }
        //long f=(long)value;
        try
        {
            jTotAmountTextField.setText(systems.converToRealMoneyFormat(sumValue));
        }
        catch(Exception e)
        {
            jTotAmountTextField.setText("Er!M1C01K0");
        }
        }
        calculateToBalance();        
    }
    private void jTable1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable1PropertyChange
       
        /* Execute submit thread*/
        processThread=new Thread(new Runnable() {
            public void run() {
            //disableControls();
               freeHeap();
            }
        });
        titleThread=new Thread(new Runnable() {
            public void run() {
                while(processThread.isAlive())setProcessingTitle(titleThread);
                //enableControls();
                //System.out.println("tablePropertyThread stopped runing.");

            }
        });
        processThread.start();
        titleThread.start(); 
    }//GEN-LAST:event_jTable1PropertyChange

    private void jRefDepartmentComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRefDepartmentComboBoxActionPerformed
       
        String refDepartment=jRefDepartmentComboBox.getSelectedItem().toString();
        if(refDepartment.equals("-- Select --"))
        { /* Execute submit thread */
            processThread=new Thread(new Runnable() {
                public void run() {
                disableControls();
                resetRefDepartment();
                }
            });
            titleThread=new Thread(new Runnable() {
                public void run() {
                    while(processThread.isAlive())setProcessingTitle(titleThread);
                    enableControls();
                    System.out.println("newCreditOrderThread stopped runing.");
                }
            });
            processThread.start();
            titleThread.start();
        }
    }//GEN-LAST:event_jRefDepartmentComboBoxActionPerformed

    private void jAccountNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAccountNameComboBoxActionPerformed
         accountNameSelected();
    }//GEN-LAST:event_jAccountNameComboBoxActionPerformed
                                         
    private void accountNameSelected()
    {
        String actName=jAccountNameComboBox.getSelectedItem().toString().trim();
        if(actName.equals("-- Select --"))
        {/* Execute submit thread */
            processThread=new Thread(new Runnable() {
                public void run() {
                disableControls();
                resetAccountName();
                }
            });
            titleThread=new Thread(new Runnable() {
                public void run() {
                    while(processThread.isAlive())setProcessingTitle(titleThread);
                    enableControls();
                    System.out.println("newCreditOrderThread stopped runing.");
                }
            });
            processThread.start();
            titleThread.start();
        }
        else
        {
            jTransactionUnitTextField.setText(systems.getValue(OpenMSApp.Database_A, "Select * from Account Where vAccountName='"+actName+"'","vAccountUnit" ));
         
        String accountName=String.valueOf(jAccountNameComboBox.getSelectedItem());
        String accountCategory=systems.getValue(OpenMSApp.Database_A, "Select * from Account where vAccountName='"+accountName+"'", "cCategory");
        if(accountCategory.equalsIgnoreCase("INVENTORY"))
        {
            jStockTypeComboBox.setEnabled(true);
            onInventoryAccount=0;
            column4enabled=false;
        }
        else{
            transType="DR";
            jStockTypeComboBox.setEnabled(false);
            onInventoryAccount=1;
            column4enabled=true;
        }
        }
    }
    private void jTransactionNoTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTransactionNoTextFieldActionPerformed
        // TODO add your handling code here:
        String value=jTransactionNoTextField.getText();
        if(value.length()>49)
        {
            JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"Maximum Number of Character (50) Exceeded ","ERROR !",JOptionPane.ERROR_MESSAGE);
            String newValue=String.copyValueOf(value.toCharArray(),0, 49);
            jTransactionNoTextField.setText(newValue);
        }
    }//GEN-LAST:event_jTransactionNoTextFieldActionPerformed

    private void jTransactionTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTransactionTypeComboBoxActionPerformed
        // TODO add your handling code here:
        String transType=jTransactionTypeComboBox.getSelectedItem().toString();
        if(transType.equals("-- Select --"))
        { /* Execute submit thread */
            processThread=new Thread(new Runnable() {
                public void run() {
                disableControls();
                resetTransactionType();
                }
            });
            titleThread=new Thread(new Runnable() {
                public void run() {
                    while(processThread.isAlive())setProcessingTitle(titleThread);
                    enableControls();
                    System.out.println("newCreditOrderThread stopped runing.");
                }
            });
            processThread.start();
            titleThread.start();
        }
    }//GEN-LAST:event_jTransactionTypeComboBoxActionPerformed

    private void jCostOrderCodeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCostOrderCodeComboBoxActionPerformed
        /* Execute submit thread */
            processThread=new Thread(new Runnable() {
                public void run() {
                disableControls();
                costOrderCodeSelected();
                }
            });
            titleThread=new Thread(new Runnable() {
                public void run() {
                    while(processThread.isAlive())setProcessingTitle(titleThread);
                    enableControls();
                    System.out.println("newCreditOrderThread stopped runing.");
                }
            });
            processThread.start();
            titleThread.start();
    }//GEN-LAST:event_jCostOrderCodeComboBoxActionPerformed
                                                 
    private void costOrderCodeSelected()
    {
        String costOrderCode=jCostOrderCodeComboBox.getSelectedItem().toString();
        if(costOrderCode.equals("-- Select --"))
        {
            resetCostOrderCode();
        }
        else
        {
        }
    }
    private void transMonthComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transMonthComboBoxActionPerformed
        // TODO add your handling code here:
        String transMonth=transMonthComboBox.getSelectedItem().toString();

        if(transMonth.equals("-- Month --")) {
        } else {
            resetTransDay(transMonth);
        }
    }//GEN-LAST:event_transMonthComboBoxActionPerformed

    private void jTransactionUnitTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTransactionUnitTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTransactionUnitTextFieldActionPerformed

private void jAmtDueTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jAmtDueTextFieldKeyPressed
// TODO add your handling code here:
        calculateToBalance();
}//GEN-LAST:event_jAmtDueTextFieldKeyPressed

private void jAmtDueTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jAmtDueTextFieldKeyReleased
// TODO add your handling code here:
        calculateToBalance();
}//GEN-LAST:event_jAmtDueTextFieldKeyReleased

private void jAmtDueTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jAmtDueTextFieldKeyTyped
// TODO add your handling code here:
        calculateToBalance();
}//GEN-LAST:event_jAmtDueTextFieldKeyTyped

private void jStockTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStockTypeComboBoxActionPerformed
// TODO add your handling code here:
    
        if(jStockTypeComboBox.getSelectedItem().equals("Opening Stock"))
        {
            transType="DNP";
        }
        else if(transType.equalsIgnoreCase("DNP")){
            transType="DRP";
        }
}//GEN-LAST:event_jStockTypeComboBoxActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if(processThread.isAlive())
        {
            try{
                processThread.stop();
                titleThread.stop();
                System.out.println("Threads successfully stopped.");
            }catch(Exception e){System.out.println("Thread stopping error: "+e);}
            this.setTitle("::. New Debit Order By User ("+OpenMSApp.EmployeeName+")");
            enableControls();
        }
        else
            dispose();
}//GEN-LAST:event_jButton1ActionPerformed

private void jOpeningCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOpeningCheckBoxActionPerformed

}//GEN-LAST:event_jOpeningCheckBoxActionPerformed

    public void resetTransYear()
    {
        String[] year=systems.getYears(1920);
        year[0]="-- Year --";
        transYearComboBox.setModel(new DefaultComboBoxModel(year));
    }
    public void resetTransMonth()
    {
        String[] month=systems.getMonthArray();
        month[0]="-- Month --";

        transMonthComboBox.setModel(new DefaultComboBoxModel(month));

    }
    public void resetTransDay(String Month)
    {
        String[] day={"-- Day --"};
        if(Month.isEmpty())
        {
            transDayComboBox.setModel(new DefaultComboBoxModel(day));
        }
        else
        {
            day=systems.getDays(Month);
            day[0]="-- Day --";
            transDayComboBox.setModel(new DefaultComboBoxModel(day));
        }

    }
    public String getCostOrderCode()
    {
        String costOrderCode=String.valueOf(jCostOrderCodeComboBox.getSelectedItem()).trim();

        if(costOrderCode.equals("-- Select --"))
        {
            costOrderCode="";
        }
        return costOrderCode;

    }
    public void makeOrder()
    {
        String actName=jAccountNameComboBox.getSelectedItem().toString().trim();
        jTransactionUnitTextField.setText(systems.getValue(OpenMSApp.Database_A, "Select * from Account Where vAccountName='"+actName+"'","vAccountUnit" ));
        String accountCategory=systems.getValue(OpenMSApp.Database_A, "Select * from Account where vAccountName='"+actName+"'", "cCategory");
        if(accountCategory.equalsIgnoreCase("REVENUE")||accountCategory.equalsIgnoreCase("EXPENSE")||accountCategory.equalsIgnoreCase("HYBRID")||accountCategory.equalsIgnoreCase("PAYABLE")||accountCategory.equalsIgnoreCase("RECEIVABLE"))
        {
            transType="DRO";
        }
        else if(transType.equalsIgnoreCase("DRO")){
            transType="DR";
        }
        String departmentName=String.valueOf(jRefDepartmentComboBox.getSelectedItem()).trim();
        String accountName=String.valueOf(jAccountNameComboBox.getSelectedItem()).trim();
        String transactionType=String.valueOf(jTransactionTypeComboBox.getSelectedItem()).trim();
        debitOrderCode=systems.getValue(OpenMSApp.Database_A, Connect.procInit+"  prnPrintDebitOrderCode"+Connect.procInitStart+Connect.procInitEnd, "cCode");

        String refID=systems.getValue(OpenMSApp.Database_A, Connect.procInit+"  prnPrintDebitRefID"+Connect.procInitStart+Connect.procInitEnd, "cCode");
        String departmentCode=systems.getValue(OpenMSApp.Database_A, "Select * from Department where vDepartmentName='"+departmentName+"'", "cDepartmentCode");

        String accountCode=systems.getValue(OpenMSApp.Database_A, "Select * from Account where vAccountName='"+accountName+"'", "cAccountCode");
        
        String activity=systems.getValue(OpenMSApp.Database_A, "Select * from Account where cAccountCode='"+accountCode+"'", "cActivity");
        String transTypeCode=systems.getValue(OpenMSApp.Database_A, "Select * from TransactionType where vTransactionType='"+transactionType+"'", "cTransactionTypeCode");
        System.out.println("DebitOrdercode= "+debitOrderCode);
        System.out.println("departmentcode= "+departmentCode);
        
        //Connect.createMSSQLConnection();
        Connect.changeDB(OpenMSApp.Database_A);
        statement=Connect.createStatement(Connect.procInit+"  prnInsDebitOrderOnOrder"+Connect.procInitStart+"?,?,?,?,?,?,?,?,?,?,?,?,?"+Connect.procInitEnd);
         try{
                    statement.setString(1,String.valueOf(merchantIDComboBox.getSelectedItem()).trim());
                    statement.setString(2,accountCode.trim());             
                    statement.setString(3,OpenMSApp.LoginCode.trim());    
                    statement.setString(4,jTransactionNoTextField.getText().trim());    
                    statement.setString(5,new String(String.valueOf(transYearComboBox.getSelectedItem()).trim())+"-"+systems.getMonthDigit(String.valueOf(transMonthComboBox.getSelectedItem()).trim())+"-"+
                            String.valueOf(transDayComboBox.getSelectedItem()).trim());
                    statement.setString(6,transTypeCode);
                    statement.setString(7,getCostOrderCode());
                    statement.setString(8,systems.converToRealMoneyFormat(jTotAmountTextField.getText().trim()));
                    statement.setString(9,departmentCode);
                    statement.setString(10,activity.trim());
                    statement.setString(11,transType);
                    statement.setString(12,refID);
                    statement.setString(13,systems.converToRealMoneyFormat(jToBalanceTextField.getText().trim()));
            }
            catch(Exception e)
            {
                System.out.println("NewDebitOrder.makeOrder() gave error ! "+e);
            }
        Connect.executeUpdateStatement(statement);
        
        int x=tableObject.length;
        int y=0,zeros=0;
        while(y<x)
        {
            if(!jTable1.getValueAt(y,3).equals("0"))
            {
                    statement=Connect.createStatement(Connect.procInit+" prnInsDebitOrderSummaryOnOrder"+Connect.procInitStart+"?,?,?,?,?,?"+Connect.procInitEnd);
             try{
                    statement.setString(1,debitOrderCode.trim());
                    statement.setString(2,jTable1.getValueAt(y,1).toString().trim());
                    statement.setString(3,jTable1.getValueAt(y,2).toString().trim()+" [T="+jTable1.getValueAt(y,5)+", Q="+jTable1.getValueAt(y,3)/*+systems.getValue(OpenMSApp.Database_A, "Select * from Item Where vName='"+jTable1.getValueAt(y,2)+"'", 4)*/+", R="+jTable1.getValueAt(y,4)+"]");
                    statement.setString(4,systems.converToRealMoneyFormat(jTable1.getValueAt(y,6).toString().trim()));
                    statement.setInt(5,Integer.parseInt(jTable1.getValueAt(y,0).toString().trim())-zeros);
                    statement.setString(6,"IN");
                }
                catch(Exception e)
                {
                    System.out.println("NewDebitOrder.makeOrder() gave error ! "+e);
                }
            Connect.executeUpdateStatement(statement);
            }
            else
            {zeros++;}
        y+=1;
        if(y==x){break;}
        }
        
        if(accountCategory.equalsIgnoreCase("INVENTORY"))
        {
        
        statement=Connect.createStatement(Connect.procInit+"  prnUpdDebitOrderOnConsent"+Connect.procInitStart+"?,?"+Connect.procInitEnd);
        try{
            statement.setString(1,String.valueOf(debitOrderCode));
            statement.setString(2,OpenMSApp.LoginCode);
        }
        catch(Exception e)
        {
            System.out.println("ConsentDebitOrder.consentCurrentOrderCode gave error! "+e);
        }
        Connect.executeUpdateStatement(statement);   
        statement=Connect.createStatement(Connect.procInit+"  prnUpdDebitOrderOnPost"+Connect.procInitStart+"?"+Connect.procInitEnd);
        try
        {
            statement.setString(1,refID);
        }
        catch(Exception e)
        {
            System.out.println("PostDebitOrder.postCurrentOrderCode gave error! "+e);
        }
        Connect.executeUpdateStatement(statement);     
        }
        Connect.alert="Y";
        Connect.closeConnection();
        String credit=systems.getValue(OpenMSApp.Database_A, "Select cCreditOrderCode from CreditOrder where cRefID='"+refID+"'", 1);
        String debits[]=systems.getColumn(OpenMSApp.Database_A, "Select cDebitOrderCode from DebitOrder where cRefID='"+refID+"'", 1);
        for(int xd=0;xd<debits.length;xd++)
           systems.implementCosting(debits[xd],"Debit");
        if(!credit.isEmpty())
           systems.implementCosting(credit,"Credit");
        printVoucher();
        //reset();
        resetTable();
    }
    public void printVoucher()
    {
        java.lang.Runtime run=java.lang.Runtime.getRuntime();
        try
        {
            NoteWriter note=new NoteWriter();
            note.writeVoucher(debitOrderCode,"",1);
                        
            if(OpenMSApp.d==null)
            {
                OpenMSApp.d=new NoteViewer("Preview Voucher - "+debitOrderCode,Configuration.officialVoucherURLPath);
                OpenMSApp.d.setVisible(true);
            }
            else if(OpenMSApp.d.isVisible()==false)
            {
                OpenMSApp.d=new NoteViewer("Preview Voucher - "+debitOrderCode,Configuration.officialVoucherURLPath);
                OpenMSApp.d.setVisible(true);        
            }
            else{
                OpenMSApp.d.setTitle("Preview Voucher - "+debitOrderCode);
                OpenMSApp.d.doTas(2);
                OpenMSApp.d.transferFocus();
                
            }
            /*
            run.exec("explorer "+Configuration.officialVoucherPath);
            run.exec("C:\\Program Files\\PrintHTML\\printhtml.exe file=\""+Configuration.officialVoucherPath+"\" ");       
             * 
             */
        }
        catch(Exception e)
        {
            System.out.println("Error while printing voucher ! "+e);
        }
    }
    private void setProcessingTitle(Thread thread)
    {
        try{
            this.setTitle("::. New Debit Order - Processing Request");
            thread.sleep(500);
            this.setTitle("::. New Debit Order - Processing Request.");
            thread.sleep(500);
            this.setTitle("::. New Debit Order - Processing Request..");
            thread.sleep(500);
            this.setTitle("::. New Debit Order - Processing Request...");
            thread.sleep(500);
        }catch(Exception e){System.out.println("Title thread"+e);}
        setTitle("::. New Debit Order By User ("+OpenMSApp.EmployeeName+")");
    }
    public void selectUserDefault()
    {
        if(jCheckBox4.isSelected()==false)
        {
            merchantIDComboBox.setSelectedItem("VD0000001");
            jTransactionTypeComboBox.setSelectedItem("CASH");
            jAccountNameComboBox.setSelectedItem("STOCK RETAIL");
            jRefDepartmentComboBox.setSelectedItem("MANAGEMENT");
            String curDay=systems.getDateDay(systems.getDateValue(OpenMSApp.Database_A, "Select NOW()", 1));
            String curMonth=systems.getDateMonth(systems.getDateValue(OpenMSApp.Database_A, "Select NOW()", 1));
            String curYear=systems.getDateYear(systems.getDateValue(OpenMSApp.Database_A, "Select NOW()", 1));        
            transMonthComboBox.setSelectedItem(curMonth);
            transDayComboBox.setSelectedItem(curDay);
            transYearComboBox.setSelectedItem(curYear);
        }
    }
    public void resetDate()
    {
        java.util.Calendar calendar= java.util.Calendar.getInstance();
        //java.util.Date currentDate= new java.util.Date();
        jDateTextField.setText(String.valueOf(calendar.getTime()));
    }
    public void resetMerchantID()
    {
        String[] merchant=systems.getTableDataArray(OpenMSApp.Database_A,"vwMerchant",1);
        merchant[0]="-- Select --";

        merchantIDComboBox.setModel(new DefaultComboBoxModel(merchant));
        jNameTextField.setText("");
    }
    public void resetRefDepartment()
    {
        String[] department=systems.getTableDataArray(OpenMSApp.Database_A,"Department",2);
        department[0]="-- Select --";

        jRefDepartmentComboBox.setModel(new DefaultComboBoxModel(department));
    }
    public void resetCostOrderCode()
    {/*
        String[] costOrderCode=systems.getTableDataArray(OpenMSApp.Database_A,"vwDebitCostOrder",1);
        costOrderCode[0]="-- Select --";

        jCostOrderCodeComboBox.setModel(new DefaultComboBoxModel(costOrderCode));*/
    }
    public void resetAccountName()
    {
        String[] actName=systems.getTableDataArray(OpenMSApp.Database_A,"vwDebitAccount",2);
        actName[0]="-- Select --";

        jAccountNameComboBox.setModel(new DefaultComboBoxModel(actName));
    }
    public void resetTransactionType()
    {
        String[] transType=systems.getTableDataArray(OpenMSApp.Database_A,"TransactionType",2);
        transType[0]="-- Select --";

        jTransactionTypeComboBox.setModel(new DefaultComboBoxModel(transType));
    }
    public void resetItem()
    {
        String[] dbItem=systems.getTableDataArray(OpenMSApp.Database_A, "Item order by vName", 2);
        javax.swing.JComboBox combo=new javax.swing.JComboBox(dbItem);
        javax.swing.table.TableColumn comboColumn=jTable1.getColumnModel().getColumn(1);
        comboColumn.setCellEditor(new javax.swing.DefaultCellEditor(combo));
    }
    public void resetField()
    {
        jTotAmountTextField.setText("0.0");
        jNameTextField.setText("");
        jTransactionNoTextField.setText("");
        jTransactionUnitTextField.setText("");
        jAmtDueTextField.setText(".");
        jToBalanceTextField.setText("");
        resetDate();
    }
    private void disableControls()
    {
        jTransactionNoTextField.setEnabled(false);
        jAmtDueTextField.setEnabled(false);
        addRowButton.setEnabled(false);
        deleteRowButton.setEnabled(false);
        makeOrderButton.setEnabled(false);
        merchantIDComboBox.setEnabled(false);
        jTransactionTypeComboBox.setEnabled(false);
        transMonthComboBox.setEnabled(false);
        transDayComboBox.setEnabled(false);
        transYearComboBox.setEnabled(false);
        jAccountNameComboBox.setEnabled(false);
        jRefDepartmentComboBox.setEnabled(false);
            jStockTypeComboBox.setEnabled(false);
        jCheckBox4.setEnabled(false);
        jCheckBox3.setEnabled(false);              
    }
    private void enableControls()
    {
        jTransactionNoTextField.setEnabled(true);
        jAmtDueTextField.setEnabled(true);
        addRowButton.setEnabled(true);
        deleteRowButton.setEnabled(true);
        makeOrderButton.setEnabled(true);
        merchantIDComboBox.setEnabled(true);
        jTransactionTypeComboBox.setEnabled(true);
        transMonthComboBox.setEnabled(true);
        transDayComboBox.setEnabled(true);
        transYearComboBox.setEnabled(true);
        jAccountNameComboBox.setEnabled(true);
        jRefDepartmentComboBox.setEnabled(true);
        jCheckBox4.setEnabled(true);
        jCheckBox3.setEnabled(true);
        String actName=jAccountNameComboBox.getSelectedItem().toString().trim();
        String accountCategory=systems.getValue(OpenMSApp.Database_A, "Select * from Account where vAccountName='"+actName+"'", "cCategory");
        if(accountCategory.equalsIgnoreCase("INVENTORY"))
        {
            jStockTypeComboBox.setEnabled(true);
        }        
        setTitle("::. New Debit Order By User ("+OpenMSApp.EmployeeName+")");
    }
    public void resetCombo()
    {
        resetItem();
        resetMerchantID();
        resetRefDepartment();
        resetTransactionType();
        resetAccountName();
        resetCostOrderCode();
        resetTransMonth();
        resetTransDay("");
        resetTransYear();
        resetItem();
        jStockTypeComboBox.setSelectedItem("-- Select --");
    }
    public void reset()
    {
        resetField();
        resetTable();
        resetCombo();
        selectUserDefault();
    }
    public void resetTable()
    {
        tableObject=new Object[][]{{1,null,null,null,null,null,null}};
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            tableObject,
            new String [] {
                "S/N", "Item","Description", "Quantity", "Rate", "VAT", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false,true, true, true, column4enabled, column4enabled, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        jTable1.getColumnModel().getColumn(0).setMinWidth(40);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(40);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(40);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(10);
            resetItem();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRowButton;
    private javax.swing.JButton deleteRowButton;
    private javax.swing.JComboBox jAccountNameComboBox;
    private javax.swing.JTextField jAmtDueTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JComboBox jCostOrderCodeComboBox;
    private javax.swing.JTextField jDateTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jNameTextField;
    private javax.swing.JCheckBox jOpeningCheckBox;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox jRefDepartmentComboBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox jStockTypeComboBox;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jToBalanceTextField;
    private javax.swing.JTextField jTotAmountTextField;
    private javax.swing.JTextField jTransactionNoTextField;
    private javax.swing.JComboBox jTransactionTypeComboBox;
    private javax.swing.JTextField jTransactionUnitTextField;
    private javax.swing.JButton makeOrderButton;
    private javax.swing.JComboBox merchantIDComboBox;
    private javax.swing.JComboBox transDayComboBox;
    private javax.swing.JComboBox transMonthComboBox;
    private javax.swing.JComboBox transYearComboBox;
    // End of variables declaration//GEN-END:variables

}
